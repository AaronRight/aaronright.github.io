{"version":3,"sources":["App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["Noise","track","bufferSize","audioContext","sampleRate","noiseBuffer","createBuffer","output","getChannelData","i","Math","random","audioSource","buffer","clearTimeout","fadeOutTimer","stop","fadeOut","canFade","gainNode","gain","linearRampToValueAtTime","currentTime","setTimeout","stopNoise","createBufferSource","createGain","connect","destination","volume","fadeIn","setValueAtTime","buildTrack","createNoise","setGain","loop","start","window","AudioContext","noise","App","state","play","this","playNoise","setState","prevState","className","xmlns","viewBox","onClick","perform","fill","x","y","width","height","d","React","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"iPAGMA,G,+GAKeC,GAMjB,IAJA,IAAMC,EAAa,EAAIF,EAAMG,aAAaC,WACpCC,EAAcL,EAAMG,aAAaG,aAAa,EAAGJ,EAAYF,EAAMG,aAAaC,YAChFG,EAASF,EAAYG,eAAe,GAEjCC,EAAI,EAAGA,EAAIP,EAAYO,IAC9BF,EAAOE,GAAqB,EAAhBC,KAAKC,SAAe,EAGlCV,EAAMW,YAAYC,OAASR,I,gCAGZJ,GACXA,EAAMW,cACRE,aAAad,EAAMe,cACnBd,EAAMW,YAAYI,U,gCAILf,GAEXA,EAAMgB,QACRhB,EAAMgB,QAAWhB,EAAMgB,SAAW,EAAKhB,EAAMgB,QAAU,GAEvDhB,EAAMgB,QAAU,GAGdhB,EAAMiB,SACRjB,EAAMkB,SAASC,KAAKC,wBAAwB,EAAGrB,EAAMG,aAAamB,YAAcrB,EAAMgB,SACtFhB,EAAMiB,SAAU,EAEhBlB,EAAMe,aAAeQ,YAAW,WAC9BvB,EAAMwB,UAAUvB,KACC,IAAhBA,EAAMgB,UAGTjB,EAAMwB,UAAUvB,K,iCAIFA,GAChBA,EAAMW,YAAcZ,EAAMG,aAAasB,qBACvCxB,EAAMkB,SAAWnB,EAAMG,aAAauB,aACpCzB,EAAMW,YAAYe,QAAQ1B,EAAMkB,UAChClB,EAAMkB,SAASQ,QAAQ3B,EAAMG,aAAayB,aAC1C3B,EAAMiB,SAAU,I,8BAGHjB,GAEbA,EAAM4B,OAAU5B,EAAM4B,QAAU,EAAK5B,EAAM4B,OAAS,GAEhD5B,EAAM6B,OACR7B,EAAM6B,OAAU7B,EAAM6B,QAAU,EAAK7B,EAAM6B,OAAS,GAEpD7B,EAAM6B,OAAS,GAGjB7B,EAAMkB,SAASC,KAAKW,eAAe,EAAG/B,EAAMG,aAAamB,aAEzDrB,EAAMkB,SAASC,KAAKC,wBAAwBpB,EAAM4B,OAAS,EAAG7B,EAAMG,aAAamB,YAAcrB,EAAM6B,OAAS,GAE9G7B,EAAMkB,SAASC,KAAKC,wBAAwBpB,EAAM4B,OAAQ7B,EAAMG,aAAamB,YAAcrB,EAAM6B,U,gCAIlF7B,GACfD,EAAMwB,UAAUvB,GAChBD,EAAMgC,WAAW/B,GACjBD,EAAMiC,YAAYhC,GAClBD,EAAMkC,QAAQjC,GACdA,EAAMW,YAAYuB,MAAO,EACzBlC,EAAMW,YAAYwB,Y,MA9EhBpC,EACGG,aAAe,IAAIkC,OAAOC,aAD7BtC,EAEGe,kB,EAgFT,IAAIwB,EAAQ,CACVV,OAAQ,IACRC,OAAQ,IACRb,QAAS,KAGUuB,E,4MACnBC,MAAQ,CACNC,MAAM,G,wDAIFC,KAAKF,MAAMC,KACb1C,EAAMwB,UAAUe,GAEhBvC,EAAM4C,UAAUL,GAGlBI,KAAKE,UAAS,SAAAC,GAAS,MAAK,CAAEJ,MAAOI,EAAUJ,W,+BAGvC,IAAD,OACP,OACE,qBAAKK,UAAU,MAAf,SACE,qBAAKC,MAAM,6BAA6BC,QAAQ,YAAYC,QAAS,kBAAM,EAAKC,WAAhF,SAEIR,KAAKF,MAAMC,KACT,sBAAMU,KAAK,UAAUC,EAAE,IAAIC,EAAE,IAAIC,MAAM,IAAIC,OAAO,MAClD,sBAAMJ,KAAK,UAAUK,EAAE,8B,GAtBJC,IAAMC,WC/EjCC,EAAcC,QACW,cAA7BxB,OAAOyB,SAASC,UAEe,UAA7B1B,OAAOyB,SAASC,UAEhB1B,OAAOyB,SAASC,SAASC,MAAM,2DA0CnC,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBjC,QACf2B,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,+GAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,WAO5BU,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,MCjGjE,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFcnB,SAAkB7B,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI6B,IAAIC,GAAwB7D,OAAOyB,SAASqC,MACpDC,SAAW/D,OAAOyB,SAASsC,OAIvC,OAGF/D,OAAOgE,iBAAiB,QAAQ,WAC9B,IAAMnC,EAAK,UAAMgC,GAAN,sBAEPtC,IAgEV,SAAiCM,EAAeC,GAE9CmC,MAAMpC,EAAO,CACXqC,QAAS,CAAE,iBAAkB,YAE5BhC,MAAK,SAACiC,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CxC,UAAUC,cAAcwC,MAAMtC,MAAK,SAACC,GAClCA,EAAasC,aAAavC,MAAK,WAC7BlC,OAAOyB,SAASiD,eAKpB9C,EAAgBC,EAAOC,MAG1Be,OAAM,WACLJ,QAAQC,IAAI,oEAtFViC,CAAwB9C,EAAOC,GAI/BC,UAAUC,cAAcwC,MAAMtC,MAAK,WACjCO,QAAQC,IACN,+GAMJd,EAAgBC,EAAOC,OEpC/B8C,GAKA7B,M","file":"static/js/main.7c166b35.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass Noise {\n  static audioContext = new window.AudioContext;\n  static fadeOutTimer: any;\n\n  // https://noisehack.com/generate-noise-web-audio-api/\n  static createNoise(track: any) {\n\n    const bufferSize = 2 * Noise.audioContext.sampleRate;\n    const noiseBuffer = Noise.audioContext.createBuffer(1, bufferSize, Noise.audioContext.sampleRate);\n    const output = noiseBuffer.getChannelData(0);\n\n    for (let i = 0; i < bufferSize; i++) {\n      output[i] = Math.random() * 2 - 1;\n    }\n\n    track.audioSource.buffer = noiseBuffer;\n  }\n\n  static stopNoise(track: any) {\n    if (track.audioSource) {\n      clearTimeout(Noise.fadeOutTimer);\n      track.audioSource.stop();\n    }\n  }\n\n  static fadeNoise(track: any) {\n\n    if (track.fadeOut) {\n      track.fadeOut = (track.fadeOut >= 0) ? track.fadeOut : 0.5;\n    } else {\n      track.fadeOut = 0.5;\n    }\n\n    if (track.canFade) {\n      track.gainNode.gain.linearRampToValueAtTime(0, Noise.audioContext.currentTime + track.fadeOut);\n      track.canFade = false;\n\n      Noise.fadeOutTimer = setTimeout(() => {\n        Noise.stopNoise(track);\n      }, track.fadeOut * 1000);\n\n    } else {\n      Noise.stopNoise(track);\n    }\n  }\n\n  static buildTrack(track: any) {\n    track.audioSource = Noise.audioContext.createBufferSource();\n    track.gainNode = Noise.audioContext.createGain();\n    track.audioSource.connect(track.gainNode);\n    track.gainNode.connect(Noise.audioContext.destination);\n    track.canFade = true; // used to prevent fadeOut firing twice\n  }\n\n  static setGain(track: any) {\n\n    track.volume = (track.volume >= 0) ? track.volume : 0.5;\n\n    if (track.fadeIn) {\n      track.fadeIn = (track.fadeIn >= 0) ? track.fadeIn : 0.5;\n    } else {\n      track.fadeIn = 0.5;\n    }\n\n    track.gainNode.gain.setValueAtTime(0, Noise.audioContext.currentTime);\n\n    track.gainNode.gain.linearRampToValueAtTime(track.volume / 4, Noise.audioContext.currentTime + track.fadeIn / 2);\n\n    track.gainNode.gain.linearRampToValueAtTime(track.volume, Noise.audioContext.currentTime + track.fadeIn);\n\n  }\n\n  static playNoise(track: any) {\n    Noise.stopNoise(track);\n    Noise.buildTrack(track);\n    Noise.createNoise(track);\n    Noise.setGain(track);\n    track.audioSource.loop = true;\n    track.audioSource.start();\n  }\n}\n\nvar noise = {\n  volume: 0.05, // 0 - 1\n  fadeIn: 2.5, // time in seconds\n  fadeOut: 1.3, // time in seconds\n}\n\nexport default class App extends React.Component {\n  state = {\n    play: false\n  }\n\n  perform() {\n    if (this.state.play) {\n      Noise.stopNoise(noise)\n    } else {\n      Noise.playNoise(noise)\n    }\n    //@ts-ignore\n    this.setState(prevState => ({ play: !prevState.play }));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 10 10\" onClick={() => this.perform()}>\n          {\n            this.state.play ?\n              <rect fill=\"#000000\" x=\"2\" y=\"2\" width=\"6\" height=\"6\" /> :\n              <path fill=\"#000000\" d=\"M 2,2 L 8,5 2,8 Z\" />\n          }\n        </svg>\n      </div>\n    );\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}